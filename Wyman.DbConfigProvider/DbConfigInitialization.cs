using System.Data;

namespace Wyman.DbConfigProvider;

/// <summary>
/// 数据库类型
/// </summary>
public enum DbType
{
    MySql,
    PostgreSQL,
    SQLServer,
    Oracle,
    SQLite
}

public static class DbConfigInitialization
{
    private static readonly SemaphoreSlim InitializationSemaphore = new(1, 1);

    public static void CreateTable(string tableName,IDbConnection connection, DbType dbType)
    {
        connection.Open();
        try
        {
            InitializationSemaphore.Wait();

            using var command = connection.CreateCommand();
            var dbConfigSql = DbConfigSqlBuilder.Create(dbType, tableName);

            // 检查表是否存在
            command.CommandText = dbConfigSql.ExistTableSql;
            var tableExists = Convert.ToInt32(command.ExecuteScalar()) > 0;

            if (!tableExists)
            {
                command.CommandText = dbConfigSql.CreateTableSql;
                command.ExecuteNonQuery();
            }
        }
        finally
        {
            InitializationSemaphore.Release();
        }
    }
}

internal static class DbConfigSqlBuilder
{
    internal static DbConfigSql2 Create(DbType dbType, string tableName)
    {
        DbConfigSql2? dbConfigSql;
        switch (dbType)
        {
            case DbType.MySql:
                dbConfigSql = new MySqlDbConfigSql(tableName);
                break;
            case DbType.PostgreSQL:
                dbConfigSql = new PostgreSQLDbConfigSql(tableName);
                break;
            case DbType.SQLServer:
                dbConfigSql = new SQLServerDbConfigSql(tableName);
                break;
            case DbType.Oracle:
                dbConfigSql = new OracleDbConfigSql(tableName);
                break;
            case DbType.SQLite:
                dbConfigSql = new SQLiteDbConfigSql(tableName);
                break;
            default:
                throw new NotImplementedException("No database of this type has been implemented");
        }
        return dbConfigSql;
    }

    internal abstract class DbConfigSql2(string tableName) : DbConfigSql(tableName)
    {
        public virtual string ExistTableSql => throw new NotImplementedException($"No SQL statement has been implemented to determine whether a table named '{tableName}' exists in the database.");
        public virtual string CreateTableSql => throw new NotImplementedException($"No SQL statement has been implemented to create a table named '{tableName}' in the database.");
    }
}
internal class MySqlDbConfigSql(string tableName) : DbConfigSqlBuilder.DbConfigSql2(tableName)
{
    public override string ExistTableSql => $"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = '{tableName}';";
    public override string CreateTableSql => $"CREATE TABLE `{tableName}` (" +
        $"`{Id}` INT AUTO_INCREMENT," +
        $"`{Key}` NVARCHAR(255) NOT NULL," +
        $"`{Value}` NVARCHAR(1000) NULL," +
        $"CONSTRAINT `{tableName}` primary key (`{Id}`));";
}
internal class PostgreSQLDbConfigSql(string tableName) : DbConfigSqlBuilder.DbConfigSql2(tableName)
{
    public override string ExistTableSql => $"SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_SCHEMA = CURRENT_SCHEMA() AND table_name = '{tableName}';";
    public override string CreateTableSql => $"CREATE TABLE \"{tableName}\" (" +
        $"\"{Id}\" SERIAL PRIMARY KEY, " +
        $"\"{Key}\" VARCHAR(255) NOT NULL, " +
        $"\"{Value}\" VARCHAR(1000) NULL);";
}
internal class SQLServerDbConfigSql(string tableName) : DbConfigSqlBuilder.DbConfigSql2(tableName)
{
    public override string ExistTableSql => $"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = DB_NAME() AND TABLE_NAME = '{tableName}';";
    public override string CreateTableSql => $"CREATE TABLE [{tableName}] (" +
        $"[{Id}] INT IDENTITY(1,1) PRIMARY KEY, " +
        $"[{Key}] NVARCHAR(255) NOT NULL, " +
        $"[{Value}] NVARCHAR(1000) NULL);";
}
internal class OracleDbConfigSql(string tableName) : DbConfigSqlBuilder.DbConfigSql2(tableName)
{
    public override string ExistTableSql => $"SELECT COUNT(*) FROM user_tables WHERE OWNER = USER AND TABLE_NAME = '{tableName}';";
    public override string CreateTableSql => $"CREATE TABLE \"{tableName}\" (" +
        $"\"{Id}\" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
        $"\"{Key}\" NVARCHAR2(255) NOT NULL, " +
        $"\"{Value}\" NVARCHAR2(1000) NULL)";
}
internal class SQLiteDbConfigSql(string tableName) : DbConfigSqlBuilder.DbConfigSql2(tableName)
{
    public override string ExistTableSql => $"SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name = '{tableName}';";
    public override string CreateTableSql => $"CREATE TABLE \"{tableName}\" (" +
        $"\"{Id}\" INTEGER PRIMARY KEY AUTOINCREMENT, " +
        $"\"{Key}\" NVARCHAR(255) NOT NULL, " +
        $"\"{Value}\" NVARCHAR(1000) NULL);";
}
